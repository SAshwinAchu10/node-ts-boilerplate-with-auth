{
  "swagger": "2.0",
  "info": {
    "description": "Project API Documentation",
    "version": "1.0.0",
    "title": "Project",
    "termsOfService": "https://project.io",
    "contact": {
      "email": "devteam@project.io"
    }
  },
  "host": "127.0.0.1:3000",
  "tags": [
    {
      "name": "Listing",
      "description": "Everything about Listings"
    },
    {
      "name": "User",
      "description": "Everything about Users"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/api/v1/listing/": {
      "post": {
        "tags": [
          "Listing"
        ],
        "summary": "Create list",
        "description": "",
        "operationId": "create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Listing object that needs to be added to the Transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Listing"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get all lists",
        "description": "Muliple tags can be provided with comma separated string",
        "operationId": "findAllList",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/listing/count": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Finding lists count",
        "description": "",
        "operationId": "findListingsCount",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Listing not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/listing/top": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Finds top list",
        "description": "",
        "operationId": "findTopListing",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Listing not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/listing/{id}/like": {
      "patch": {
        "tags": [
          "Listing"
        ],
        "summary": "Patch listing like",
        "description": "",
        "operationId": "patchListingLike",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Listing not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/listing/{id}/request": {
      "patch": {
        "tags": [
          "Listing"
        ],
        "summary": "Patch listing request",
        "description": "",
        "operationId": "patchListingRequest",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Listing not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/listing/q": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Finding by param list",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findByParamList",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "seller_twitter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "price",
            "type": "number"
          },
          {
            "in": "query",
            "name": "request_count",
            "type": "number"
          },
          {
            "in": "query",
            "name": "deleted_at",
            "type": "string"
          },
          {
            "in": "query",
            "name": "paycode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "liked",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listing"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ListTransaction_auth": [
              "write:Listings",
              "read:Listings"
            ]
          }
        ]
      }
    },
    "/api/v1/user/q": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find by param",
        "description": "Returns a single Listing",
        "operationId": "findByParamUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "type": "string"
          },
          {
            "in": "query",
            "name": "first_name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "mobile",
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "type": "string"
          },
          {
            "in": "query",
            "name": "twitter_handle",
            "type": "string"
          },
          {
            "in": "query",
            "name": "password",
            "type": "string"
          },
          {
            "in": "query",
            "name": "postcode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "address_line1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "address_line2",
            "type": "string"
          },
          {
            "in": "query",
            "name": "suburb",
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "type": "string"
          },
          {
            "in": "query",
            "name": "last_name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "delivery_address_line1",
            "type": "string"
          },
          {
            "in": "query",
            "name": "delivery_address_line2",
            "type": "string"
          },
          {
            "in": "query",
            "name": "delivery_state",
            "type": "string"
          },
          {
            "in": "query",
            "name": "delivery_postcode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "stripe_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "delivery_country",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Listing not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/v1/user/": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User get all",
        "description": "",
        "operationId": "findAllUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ListTransaction_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://listtransaction.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:Listings": "modify Listings in your account",
        "read:Listings": "read your Listings"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "twitter_handle": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "address_line1": {
          "type": "string"
        },
        "address_line2": {
          "type": "string"
        },
        "suburb": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postcode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "deliver_address_line1": {
          "type": "string"
        },
        "deliver_address_line2": {
          "type": "string"
        },
        "delivery_suburb": {
          "type": "string"
        },
        "deliver_state": {
          "type": "string"
        },
        "delivery_postcode": {
          "type": "string"
        },
        "stripe_id": {
          "type": "string"
        },
        "delivery_country": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Listing": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "seller_twitter": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "validate": {
          "type": "string"
        },
        "request_count": {
          "type": "number"
        },
        "deleted_at": {
          "type": "string"
        },
        "paycode": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "liked": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Listing"
      }
    }
  }
}